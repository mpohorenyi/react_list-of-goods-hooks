{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortValue","goodsFromServer","App","useState","sortType","reverse","sortField","setSortField","visibleGoods","goods","preparedGoods","map","good","name","length","id","uuidv4","sort","good1","good2","Name","localeCompare","Length","getPreparedGoods","updateSortFieldKey","key","newValue","currentSortField","updatedSortField","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KA8BKA,E,kFAxBQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAcGD,K,YAAAA,E,iBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAmB,CACnDC,SAAU,KACVC,SAAS,IAFX,mBAAOC,EAAP,KAAkBC,EAAlB,KAIMC,EArCR,SACEC,EADF,GAGW,IADPL,EACM,EADNA,SAAUC,EACJ,EADIA,QAERK,EAAgBD,EAAME,KAAI,SAACC,GAAD,MAAW,CACvCC,KAAMD,EACNE,OAAQF,EAAKE,OACbC,GAAIC,kBAsBN,OAnBIZ,IACFM,EAAgBA,EAAcO,MAAK,SAACC,EAAOC,GACzC,OAAQf,GACN,KAAKJ,EAAUoB,KACb,OAAOF,EAAMd,GAAUiB,cAAcF,EAAMf,IAE7C,KAAKJ,EAAUsB,OACb,OAAOJ,EAAMd,GAAYe,EAAMf,GAEjC,QACE,OAAO,OAKXC,IACFK,EAAgBA,EAAcL,WAGzBK,EAQca,CAAiBtB,EAAiBK,GACjDkB,EAAqB,SAACC,EAAqBC,GAC/CnB,GAAa,SAACoB,GACZ,IAAMC,EAAgB,eAAQD,GAQ9B,OALEC,EAAiBH,GADP,YAARA,GACuBG,EAAiBH,GAElBC,EAGnBE,MAIX,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYzB,EAAUF,WAAaJ,EAAUoB,OAE/CY,QAAS,kBAAMR,EAAmB,WAAYxB,EAAUoB,OAL1D,iCAUA,wBACEU,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYzB,EAAUF,WAAaJ,EAAUsB,SAE/CU,QAAS,kBAAMR,EAAmB,WAAYxB,EAAUsB,SAL1D,4BAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAazB,EAAUD,UAEzB2B,QAAS,kBAAMR,EAAmB,YALpC,sBAUElB,EAAUF,UAAYE,EAAUD,UAChC,wBACEyB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPzB,EAAa,CACXH,SAAU,KACVC,SAAS,KANf,sBAeJ,6BACGG,EAAaG,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,EAAKC,MADgBD,EAAKG,aCvIvCkB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.00ffac6e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid'; // eslint-disable-line\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Good {\n  name: string;\n  length: number;\n  id: string;\n}\n\ninterface SortType {\n  sortType: SortValue | null;\n  reverse: boolean;\n}\n\nenum SortValue {\n  Name = 'name',\n  Length = 'length',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortType, reverse }: SortType,\n): Good[] {\n  let preparedGoods = goods.map((good) => ({\n    name: good,\n    length: good.length,\n    id: uuidv4(),\n  }));\n\n  if (sortType) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortValue.Name:\n          return good1[sortType].localeCompare(good2[sortType]);\n\n        case SortValue.Length:\n          return good1[sortType] - good2[sortType];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>({\n    sortType: null,\n    reverse: false,\n  });\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField);\n  const updateSortFieldKey = (key: keyof SortType, newValue?: SortValue) => {\n    setSortField((currentSortField) => {\n      const updatedSortField = { ...currentSortField };\n\n      if (key === 'reverse') {\n        updatedSortField[key] = !updatedSortField[key];\n      } else {\n        updatedSortField[key] = newValue as SortValue;\n      }\n\n      return updatedSortField;\n    });\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField.sortType !== SortValue.Name,\n          })}\n          onClick={() => updateSortFieldKey('sortType', SortValue.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField.sortType !== SortValue.Length,\n          })}\n          onClick={() => updateSortFieldKey('sortType', SortValue.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !sortField.reverse,\n          })}\n          onClick={() => updateSortFieldKey('reverse')}\n        >\n          Reverse\n        </button>\n\n        {(sortField.sortType || sortField.reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField({\n                sortType: null,\n                reverse: false,\n              });\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good.id}>\n            {good.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}